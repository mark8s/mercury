#!/bin/bash 

#####################################
#
# Set up two kind clusters:
#   1. a management plane which will have a service-mesh-hub namespace, and
#   2. a target cluster
#
# The management plane will have the appropriate secret for communicating with the target cluster
# Your kube context will be left pointing to the management plane cluster
# The target cluster will have Istio set up in the istio-system namespace in its demo profile
#
# To clean up **ALL** of your kind clusters, run this script as: `bash ci/setup-kind.sh cleanup`
# I had some trouble with the docker VM running out of disk space- run this cleanup step often if you can
#
#####################################

if [ "$1" == "-h" ]; then 
echo "Command line help:"
echo ""
echo "./install [cluster number or cluster name (Optional)] [api-server port number (Optional)]"
echo ""
echo "Examples:"
echo "1. Default:"
echo "Optional:"
echo "   ./install "
echo "   ./install 1"
echo "   ./install cluster1"
echo "   ./install cluster1 6441"
exit 0
fi

export COLOR_PREFIX="\e"
export ECHO_E="echo -e"
if [ "$OS" == "Darwin" ]; then
    export COLOR_PREFIX="\033"
fi

export DARKRED="\033[1;31m"
export RED="\033[3;31m"
export DARKGREEN="\033[1;32m"
export GREEN="\033[3;32m"
export DARKYELLOW="\033[1;33m"
export YELLOW="\033[3;33m"
export DARKBLUE="\033[1;34m"
export BLUE="\033[3;34m"
export DARKPURPLE="\033[1;35m"
export PURPLE="\033[3;35m"
export DARKTEAL="\033[1;36m"
export TEAL="\033[3;36m"
export DARKGRAY="\033[1;90m"
export GRAY="\033[3;37m"
export ENDCOLOR="\033[3;0m"
export CANYON=${TEAL}

export E_DARKRED="${COLOR_PREFIX}[1;31m"
export E_RED="${COLOR_PREFIX}[3;31m"
export E_DARKGREEN="${COLOR_PREFIX}[1;32m"
export E_GREEN="${COLOR_PREFIX}[3;32m"
export E_DARKYELLOW="${COLOR_PREFIX}[1;33m"
export E_YELLOW="${COLOR_PREFIX}[3;33m"
export E_DARKBLUE="${COLOR_PREFIX}[1;34m"
export E_BLUE="${COLOR_PREFIX}[3;34m"
export E_DARKPURPLE="${COLOR_PREFIX}[1;35m"
export E_PURPLE="${COLOR_PREFIX}[3;35m"
export E_DARKTEAL="${COLOR_PREFIX}[1;36m"
export E_TEAL="${COLOR_PREFIX}[3;36m"
export E_ENDCOLOR="${COLOR_PREFIX}[3;0m"

WORKSPACE=${PWD}

export KUBECONFIG=~/.kube/config
export PATH=$PATH:${WORKSPACE}/bin

status=1
spin="/-\|"

# prerequisites

function is_exist() {
  which $1 &> /dev/null
  if [[ $? != 0 ]]; then
    if [[ "$3" == "install" ]]; then
      echo "$1 does not exist, please install $1 $2 or higher version"
      echo "You may install $1 follow the instructions here $4"
    else
      echo "$1 does not exist, installing $1 $2"
      echo ""
      sudo wget $4 -O /usr/local/bin/$1
      sudo chmod +x /usr/local/bin/$1
      echo ""
      return
    fi
    exit -1
  fi
}

KUBE_VER=${KUBE_VER:-v1.20.2}

is_exist docker v0.19.0 install "https://docs.docker.com/get-docker/"
is_exist kubectl ${KUBE_VER} download "https://dl.k8s.io/release/${KUBE_VER}/bin/linux/amd64/kubectl"
is_exist kind v0.10.0 download "https://github.com/kubernetes-sigs/kind/releases/download/v0.10.0/kind-linux-amd64"

# if [[ $(docker network ls | grep -c kind) == 0 ]]; then
#   docker network create --driver=bridge \
#     -o 'com.docker.network.bridge.name=kind' kind
# fi

cluster_num=$(kind get clusters | wc -l)
user_memory=$(free | awk '{print $7}' | awk 'NR==2')
min_memory=2048000
if [[ ${user_memory} -lt ${min_memory} ]]; then
  echo 'Error: At least 2G of available memory is required'
  exit 1
fi

menu() {
    echo "Avaliable options:"
    for i in ${!options[@]}; do 
        printf "%3d%s) %s\n" $((i+1)) "${choices[i]:- }" "${options[i]}"
    done
    if [[ "$msg" ]]; then echo "$msg"; fi
}

ip_addr=$(ip a | grep -v kind | grep -v kube | grep -v 127.0.0.1 | grep -v docker | grep -v 'br\-' | grep inet | grep -v inet6 | sed 's/\//\ /g' | awk '{print $2}')

options=(${ip_addr})
options_num="${#options[@]}"
#echo options_num: $options_num

if [ "${options_num}" == "0" ]; then
  read -p "Please enter your host IP address: " ip
elif [ "${options_num}" == "1" ]; then 
  ip=${options[0]}
else
  echo "ip: ${ip_addr}"

  prompt="Please Select your host IP adress: "
  while menu && read -rp "$prompt" num && [[ "$num" ]]; do
      [[ "$num" != *[![:digit:]]* ]] &&
      (( num > 0 && num <= ${#options[@]} )) ||
      { msg="Invalid option: $num"; continue; }
      ((num--)); msg="${options[num]} was ${choices[num]:+un}checked"
      [[ "${choices[num]}" ]] && choices[num]="" || choices[num]="+"

      if [[ "${choices[num]}" ]]; then
        break
      fi
  done

  result=""
  printf "You selected host IP address: "; msg=" nothing"
  for i in ${!options[@]}; do
      if [[ "${choices[i]}" ]]; then
          printf " %s" "${options[i]}"
          msg=""
          result="${result} ${options[i]}"
      fi
  done

ip=${result}

fi

ip="${ip#"${ip%%[![:space:]]*}"}"

cluster_name=$1

echo $1 | grep -q "^[0-9]*$"
if [[ $? == 0 ]]; then
  
  echo "* cluster_num ${cluster_num} $1"
  if [[ "${cluster_num}" == "" ]]; then
    echo "==="
    cluster_num=1
  elif [[ "$1" == "" ]]; then
    echo "+++"
    cluster_num=$((cluster_num + 1))
  fi
  
  cluster_name=cluster${cluster_num}
  echo "* cluster_num ${cluster_num}"
else
  echo "---"
  cluster_num=$((cluster_num + 1))
  cluster_name=$1
  echo "# cluster_num ${cluster_num}"
fi

echo "You are choosing to install KinD cluster: ${cluster_name}"

# check if cluster name is already exist
if [[ $(kind get clusters 2 &> /dev/null | grep -cnw ${cluster_name}) -gt 0 ]]; then
  echo "Error: ${cluster_name} is already exist!"
  exit -1
fi

echo
echo -e "${GREEN}Mercury is installing ${cluster_name} on host ${ip} ...${E_GREEN}"
echo

# reg_name='kind-registry'
# reg_port='5000'

work_dir="$PWD"

# The default version of k8s under Linux is 1.18
# https://github.com/solo-io/service-mesh-hub/issues/700
kindImage=kindest/node:${KUBE_VER}

# set up each cluster
# Create NodePort for remote cluster so it can be reachable from the management plane.
# This config is roughly based on: https://kind.sigs.k8s.io/docs/user/ingress/


# Create NodePort for remote cluster so it can be reachable from the management plane.
# This config is roughly based on: https://kind.sigs.k8s.io/docs/user/ingress/
function install_cluster() (
  kubeport=$2
  if [[ "$2" == "" ]]; then
    kubeport=644${cluster_num}
  fi 

  cat <<EOF | kind create cluster --name ${cluster_name} --image $kindImage --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  apiServerAddress: "${ip}"
  apiServerPort: ${kubeport}
  kubeProxyMode: "ipvs"
  podSubnet: "10.24${cluster_num}.0.0/16"  
  serviceSubnet: "10.9${cluster_num}.0.0/12"
nodes:
- role: control-plane
  extraMounts:
  - hostPath: /var/run/docker.sock
    containerPath: /var/run/docker.sock
  extraPortMappings:
  - containerPort: 80
    hostPort: 20080
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 7575
    hostPort: 7575
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 9090
    hostPort: 9090
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 20001
    hostPort: 20001
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 15443
    hostPort: 15443
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 30080
    hostPort: 30080
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 30066
    hostPort: 30066
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 35672
    hostPort: 35672
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 30880
    hostPort: 30880
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 30201
    hostPort: 30201
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 30202
    hostPort: 30202
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 30203
    hostPort: 30203
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 30204
    hostPort: 30204
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
  - containerPort: 30205
    hostPort: 30205
    listenAddress: "0.0.0.0" # Optional, defaults to "0.0.0.0"
    protocol: tcp # Optional, defaults to tcp
- role: worker
  extraMounts:
  - hostPath: /var/run/docker.sock
    containerPath: /var/run/docker.sock
- role: worker
  extraMounts:
  - hostPath: /var/run/docker.sock
    containerPath: /var/run/docker.sock
kubeadmConfigPatches:
- |
  apiVersion: kubeadm.k8s.io/v1beta2
  kind: ClusterConfiguration
  apiServer:
    extraArgs:
      service-account-api-audiences: "api"
      service-account-signing-key-file: "/etc/kubernetes/pki/sa.key"
      service-account-issuer: "kubernetes.default.svc"
EOF

  wait

  # for node in $(kind get nodes); do
  #   kubectl annotate node "${node}" "kind.x-k8s.io/registry=localhost:${reg_port}";
  # done
  printf "\n\n---\n"
  echo "Finished setting up ${cluster_name}"

)

if [[ $(kind get clusters | grep ${cluster_name} | wc -l) < 1 ]]; then

  install_cluster $@

  # kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml
  # kubectl -n kube-system set env daemonset/calico-node FELIX_IGNORELOOSERPF=true
fi

cd "${work_dir}"

ip16=$(docker network inspect kind | grep Gateway | grep -v '::' | awk '{print $2}' | sed s/\"//g | sed s/.0.1//g)
$ECHO_E "${GREEN}KinD virtual IP ${ip16}.25${cluster_num}.0/24${E_GREEN}"

# Post installations
$ECHO_E "Post installations"

cluster=kind-${cluster_name}

kubectl --context $cluster apply -f namespace.yaml
kubectl --context $cluster -n metallb-system apply -f metallb.yaml
kubectl --context $cluster create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"

kubectl --context $cluster -n metallb-system apply -f - <<_EOF
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - "${ip16}.25${cluster_num}.1-${ip16}.25${cluster_num}.255"
_EOF

$ECHO_E "${GREEN}✔${E_GREEN} ${cluster_name} have been created"

